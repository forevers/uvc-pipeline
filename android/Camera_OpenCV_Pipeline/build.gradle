// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// references
// https://github.com/passsy/gradle-GitVersioner/blob/master/git-versioner.gradle
// https://blog.uncommon.is/using-git-to-generate-versionname-and-versioncode-for-android-apps-aaa9fc2c96af
ext {
    GitVersion gitVersion = this.generateVersion()
    gitVersionName = gitVersion.name
    gitVersionCode = gitVersion.code
    gitVersionBranch = gitVersion.branch
    gitVersionHash = gitVersion.hash
    gitVersionHashShort = gitVersion.hash_short
}

public class GitVersion {

    public String name;
    public String code;
    public String branch;
    public String hash;
    public String hash_short;
}

def getVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def getVersionCode() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'origin/master'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim()) * 100
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionBranch() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionHash() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionHashShort() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always', '--dirty'
            //commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return -1;
    }
}


def GitVersion generateVersion() {

    def version = new GitVersion()
    version.name = getVersionName()
    version.code = getVersionCode()
    version.branch = getVersionBranch()
    version.hash = getVersionHash()
    version.hash_short = getVersionHashShort()

    return version
}
